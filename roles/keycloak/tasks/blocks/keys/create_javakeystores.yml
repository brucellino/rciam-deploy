---
# tasks/blocks/keys/create_javakeystores.yml
- name: Acquire tokens
  ansible.builtin.include_tasks: blocks/helpers/get_tokens.yml

- name: Create the java keystores folder (if it doesn't exist)
  ansible.builtin.file:
    path: "{{ keycloak_keystores }}/{{ item[0].name }}"
    recurse: true
    state: directory
    mode: "0500"
    owner: "{{ keycloak_service_user }}"
    group: "{{ keycloak_service_user }}"
  become: true
  run_once: false

- name: Create a keystore for the given certificate/private key pair (inline)
  community.general.java_keystore:
    name: "{{ item[1].keystore_config.key_alias }}"
    certificate: "{{ item[1].keystore_config.certificate }}"
    private_key: "{{ item[1].keystore_config.privatekey }}"
    private_key_passphrase: "{{ item[1].keystore_config.key_passphrase }}"
    password: "{{ item[1].keystore_config.keystore_password }}"
    dest: "{{ keycloak_keystores }}/{{ item[0].name }}/{{ item[1].keystore_config.key_alias }}.jks"
    mode: "0400"
    owner: "{{ keycloak_service_user }}"
    group: "{{ keycloak_service_user }}"
  become: true
  run_once: false

# Now modify the item[1] to match the expected one
# 1) assemble the correct item[1].config (fuse with keystore_config)
# 2) remove the item[1].keystore_config

- name: Keycloak | keys | modify to match the expected
  ansible.builtin.set_fact:
    additional_config:
      config:
        keystore:
          - "{{ keycloak_keystores }}/{{ item[0].name }}/{{ item[1].keystore_config.key_alias }}.jks"
        keystorePassword:
          - "{{ item[1].keystore_config.keystore_password }}"
        keyAlias:
          - "{{ item[1].keystore_config.key_alias }}"
        keyPassword:
          - "{{ item[1].keystore_config.key_passphrase }}"

- name: Keycloak | keys | add the correct
  ansible.builtin.set_fact:
    item1_fused: "{{ item[1] | combine(additional_config, recursive=True) }}"

- name: Keycloak | keys |
  ansible.builtin.set_fact:
    item1_fused_cleaned: {}

- name: Keycloak | keys |
  ansible.builtin.set_fact:
    item1_fused_cleaned: "{{ item1_fused_cleaned | combine({keypair.key: keypair.value}) }}"
  when: keypair.key != "keystore_config"
  loop_control:
    loop_var: keypair
  with_dict: "{{ item1_fused }}"

- name: Keycloak | keys |
  ansible.builtin.set_fact:
    item0: "{{ item[0] }}"
    item1: "{{ item1_fused_cleaned }}"
