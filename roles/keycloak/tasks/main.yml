---
## start the installation of keycloak

- name: Include OS-specific variables
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "os/{{ ansible_distribution }}-{{ ansible_distribution_release }}.yml"
    - "os/{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
    - "os/{{ ansible_distribution }}.yml"
    - "os/{{ ansible_os_family }}.yml"
  ignore_errors: true # noqa ignore-errors
  tags:
    - always

- name: Keycloak | Set vars
  tags:
    - always
  block:
    - name: Split Keycloak version string into parts
      ansible.builtin.set_fact:
        keycloak_version_parts: "{{ keycloak_version.split('.') }}"
    - name: Define Keycloak major version number
      ansible.builtin.set_fact:
        keycloak_major_version: "{{ keycloak_version_parts[0] }}"
      tags:
        - always
    - name: Define Keycloak minor version number
      ansible.builtin.set_fact:
        keycloak_minor_version: "{{ keycloak_version_parts[1] }}"
      tags:
        - always
    - name: Define Keycloak patch version number only when specified in version string
      ansible.builtin.set_fact:
        keycloak_patch_version: "{{ keycloak_version_parts[2] | default(omit) }}"

- name: Include keycloak-specific variables
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "keycloak-{{ keycloak_major_version }}.{{ keycloak_minor_version }}.yml"
    - "keycloak-{{ keycloak_major_version }}.yml"
  ignore_errors: true # noqa ignore-errors
  tags:
    - always

- name: Install Java with OS-specific packages
  ansible.builtin.include_tasks: "java/{{ ansible_distribution }}-{{ ansible_distribution_release }}.yml"
  tags:
    - always

- name: Find local keycloak address
  ansible.builtin.set_fact:
    keycloak_local_address: >-
      {% if ansible_facts.default_ipv4.address is defined %}
      {{ ansible_facts.default_ipv4.address }}
      {% elif ansible_facts.default_ipv6.address is defined %}
      {{ ansible_facts.default_ipv6.address }}
      {% else %}
      localhost
      {% endif %}
  tags:
    - always

### create keycloak_service_user
- name: Create Keycloak service user/group
  ansible.builtin.user:
    name: "{{ keycloak_service_user }}"
    home: /nonexistent
    shell: /usr/sbin/nologin
    system: true
    create_home: false
  become: true
  tags:
    - always

### setup the logs folder (also do some actions to preserve backwards compatibility)
- name: Setup logs folder
  ansible.builtin.include_tasks: "blocks/helpers/setup_logs_folder.yml"
  tags: "keycloak:install:setup_logs_folder"

- name: Extract keycloak from archive
  block:
    - name: "Task block: Download keycloak"
      become: true
      block:
        - name: Create keycloak temp directory
          ansible.builtin.file:
            path: "/tmp/keycloak-tmp"
            state: directory
            mode: "0755"
        - name: Download keycloak archive file
          ansible.builtin.get_url:
            url: "{{ keycloak_archive_url }}"
            dest: /tmp/keycloak_archive
            timeout: 30
            mode: "0644"
        - name: Compute sha1 hash of archive
          ansible.builtin.stat:
            path: "/tmp/keycloak_archive"
            checksum_algorithm: sha1
          register: keycloak_sha1
        - name: Create keycloak_home if not exists
          ansible.builtin.file:
            path: "{{ keycloak_home }}"
            state: directory
            mode: "0755"
        - name: Create empty file if not exists
          ansible.builtin.copy:
            dest: "{{ keycloak_home }}/sha1"
            content: ""
            force: false
            mode: "0644"
        - name: Previous sha1 # noqa command-instead-of-shell
          ansible.builtin.shell: "cat {{ keycloak_home }}/sha1"
          changed_when: false
          register: previous_sha1
        - name: Compare sha1
          ansible.builtin.set_fact:
            is_same_archive: "{{ true if keycloak_sha1.stat.checksum == previous_sha1.stdout else false }}"

    - name: "Task block: Extract keycloak"
      become: true
      when: not is_same_archive
      block:
        - name: Unpack keycloak
          ansible.builtin.unarchive:
            src: /tmp/keycloak_archive
            dest: /tmp/keycloak-tmp
            owner: "{{ keycloak_service_user }}"
            group: "{{ keycloak_service_user }}"
            remote_src: true
            extra_opts: "--no-same-owner" # since it's run with elevated priviledges, to avoid preserving ownership from the archive
        - name: Find keycloak extracted folder name
          ansible.builtin.find:
            paths: /tmp/keycloak-tmp
            patterns: "keycloak*"
            file_type: directory
            recurse: false
          register: find_result
        - name: Remove any previous installation
          ansible.builtin.file:
            path: "{{ keycloak_home }}"
            state: absent
        - name: Move extracted keycloak to final keycloak folder
          ansible.builtin.command: "mv {{ find_result.files[0].path }} {{ keycloak_home }}"
          args:
            removes: "{{ find_result.files[0].path }}"
            creates: "{{ keycloak_home }}"

        - name: Store previous sha1
          ansible.builtin.copy:
            dest: "{{ keycloak_home }}/sha1"
            content: "{{ keycloak_sha1.stat.checksum }}"
            mode: "0644"
  always:
    - name: Delete downloaded archive
      ansible.builtin.file:
        path: /tmp/keycloak_archive
        state: absent

- name: Keycloak | import quarkus install tasks
  ansible.builtin.import_tasks: "quarkus/install.yml"
  when: keycloak_version.split('.')[0] | int >= 18

- name: Keycloak | import wildfly install
  ansible.builtin.import_tasks: wildfly/install.yml
  when: keycloak_version.split('.')[0] | int < 18

##### configure keycloak

- name: Configure various keycloak aspects
  ansible.builtin.import_tasks: "configure.yml"
  tags: "keycloak:config"
